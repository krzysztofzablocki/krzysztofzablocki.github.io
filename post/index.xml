<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Krzysztof Zabłocki</title>
    <link>https://www.merowing.info/post/</link>
    <description>Recent content in Posts on Krzysztof Zabłocki</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 21 Mar 2022 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://www.merowing.info/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Exhaustive testing in TCA</title>
      <link>https://www.merowing.info/2022/03/exhaustive-testing-in-tca/</link>
      <pubDate>Mon, 21 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>https://www.merowing.info/2022/03/exhaustive-testing-in-tca/</guid>
      <description>&lt;figure class=&#34;center&#34;&gt;
    
        &lt;img src=&#34;https://www.merowing.info/2022/exhausted.jpg&#34;  /&gt;
    
    
&lt;/figure&gt;



&lt;p&gt;I’ve worked on 5+ apps using &lt;a href=&#34;https://github.com/pointfreeco/swift-composable-architecture&#34;&gt;The Composable Architecture&lt;/a&gt; and I really like it but I’ve observed few issues that we can run into in bigger apps.&lt;/p&gt;

&lt;p&gt;As you probably know I’m also a big proponent of &lt;a href=&#34;https://merowing.info/2017/01/testing-ios-apps/&#34;&gt;TDD / BDD&lt;/a&gt;, so let’s start by talking about what I don’t like about the way TCA does testing.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Hot Reloading in Swift</title>
      <link>https://www.merowing.info/2022/03/hot-reloading-in-swift/</link>
      <pubDate>Mon, 21 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>https://www.merowing.info/2022/03/hot-reloading-in-swift/</guid>
      <description>&lt;figure class=&#34;center&#34;&gt;
    
        &lt;img src=&#34;https://www.merowing.info/2022/hot-reloading.jpg&#34;  /&gt;
    
    
&lt;/figure&gt;



&lt;p&gt;The year is 2040, our newest MacBook M30X processors can compile large Swift projects perceivably instantaneously, sounds pretty amazing right?&lt;/p&gt;

&lt;p&gt;Except, compiling codebase is just part of our iteration cycle, there are other ones like restarting it (or deploying to the device), re-navigate to the previous location where you were in the app itself, re-produce the data you need.&lt;/p&gt;

&lt;p&gt;Doesn’t sound bad if you have to do it once, but what if you are like me and on a usual day do between &lt;strong&gt;200 - 500&lt;/strong&gt; iterations on the codebase? It adds up.&lt;/p&gt;

&lt;p&gt;There is a better way, embraced by other platforms but also achievable in the Swift/iOS ecosystem. &lt;strong&gt;I’ve used it for over a decade.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Do you want to save up to 10h work per week, starting today?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Code-Review best practices</title>
      <link>https://www.merowing.info/2022/02/code-review-best-practices/</link>
      <pubDate>Mon, 21 Feb 2022 00:00:00 +0000</pubDate>
      
      <guid>https://www.merowing.info/2022/02/code-review-best-practices/</guid>
      <description>&lt;figure class=&#34;center&#34;&gt;
    
        &lt;img src=&#34;https://www.merowing.info/2022/collaboration.jpg&#34;  /&gt;
    
    
&lt;/figure&gt;



&lt;p&gt;No matter how experienced we are, we are bound to make mistakes in our work.&lt;/p&gt;

&lt;p&gt;This simple fact is one of the reasons why Code Reviews have become the cornerstone of software engineering processes around the world.&lt;/p&gt;

&lt;p&gt;Part of my job is building teams and establishing best practices for them to operate efficiently and collaboratively.&lt;/p&gt;

&lt;p&gt;But team practices shouldn&amp;rsquo;t just be coming from an individual, which is why I first interviewed a bunch of our engineers at &lt;a href=&#34;https://thebrowser.company&#34;&gt;The Browser Company&lt;/a&gt; around what is the goal of PR&amp;rsquo;s and Code reviews.&lt;/p&gt;

&lt;p&gt;In the spirit of giving back to the community, we&amp;rsquo;ve decided to share those practices.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Leave your ego at the door</title>
      <link>https://www.merowing.info/2021/11/leave-your-ego-at-the-door/</link>
      <pubDate>Mon, 08 Nov 2021 00:00:00 +0000</pubDate>
      
      <guid>https://www.merowing.info/2021/11/leave-your-ego-at-the-door/</guid>
      <description>&lt;figure class=&#34;center&#34;&gt;
    
        &lt;img src=&#34;https://www.merowing.info/2021/ego.jpg&#34;  /&gt;
    
    
&lt;/figure&gt;



&lt;p&gt;We define ego as a person’s sense of self-importance. It’s an attribute that contributes to building up your identity and figuring out what you want in life.&lt;/p&gt;

&lt;p&gt;But left unchecked, ego can lead to arrogance and ignorance.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Improving Composable Architecture Debugging</title>
      <link>https://www.merowing.info/2021/08/improving-composable-architecture-debugging/</link>
      <pubDate>Wed, 18 Aug 2021 06:43:04 +0100</pubDate>
      
      <guid>https://www.merowing.info/2021/08/improving-composable-architecture-debugging/</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve been a fan of &lt;a href=&#34;http://pointfree.co/&#34;&gt;Point Free&lt;/a&gt; &lt;a href=&#34;https://github.com/pointfreeco/swift-composable-architecture&#34;&gt;Composable architecture&lt;/a&gt; for a while now.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve worked on TCA projects for more than a year on projects of all sizes: from smaller projects like my indie &lt;a href=&#34;https://www.merowing.info/sourcery-pro&#34;&gt;Sourcery Pro&lt;/a&gt;, through the &lt;a href=&#34;nytimes.com&#34;&gt;New York Times&lt;/a&gt; project, to a truly large codebase, a completely new browser for &lt;a href=&#34;thebrowser.company&#34;&gt;The Browser Company&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;TCA has been working great in all of them, but one thing that I was missing was an easy way to debug state changes, as the official &lt;code&gt;debug&lt;/code&gt; higher-order reducer doesn&amp;rsquo;t play well with large app states.&lt;/p&gt;

&lt;p&gt;So I thought: let&amp;rsquo;s create an interface that will not only deal with larger states, but also offer us a way to filter actions with ease:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;.debugDiffing(allowedActions: .allExcept(.hoverActions, .windowVisibility))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Apple Treats interview</title>
      <link>https://www.merowing.info/2021/05/apple-treats-interview/</link>
      <pubDate>Wed, 05 May 2021 06:43:04 +0100</pubDate>
      
      <guid>https://www.merowing.info/2021/05/apple-treats-interview/</guid>
      <description>&lt;p&gt;Yesterday I was interviewed by &lt;a href=&#34;https://twitter.com/AppleTreatsNews&#34;&gt;Apple Treats&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can watch the recording here:&lt;/p&gt;

&lt;div 
class=&#34;magnific-video mpf-iframe embed video-player &#34;&gt;
	&lt;iframe src=&#34;https://www.youtube.com/embed/nxzHcUTm20E&#34; type=&#34;text/html&#34;
		allowfullscreen
		frameborder=&#34;0&#34;
		width=&#34;100%&#34;
		height=&#34;385&#34;
	&gt;&lt;/iframe&gt;
&lt;/div&gt;



&lt;p&gt;Or &lt;a href=&#34;https://podcasts.apple.com/us/podcast/may-4-2021-sourcery-for-developers/id1553249730?i=1000520241454&#34;&gt;listen in Apple Podcasts&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Dear Xcode....</title>
      <link>https://www.merowing.info/2021/04/dear-xcode..../</link>
      <pubDate>Tue, 20 Apr 2021 06:43:04 +0100</pubDate>
      
      <guid>https://www.merowing.info/2021/04/dear-xcode..../</guid>
      <description>&lt;p&gt;Two weeks ago I&amp;rsquo;ve released &lt;a href=&#34;https://www.merowing.info/sourcery-pro&#34;&gt;Sourcery Pro&lt;/a&gt;, the most powerful Xcode extension that exists.&lt;/p&gt;

&lt;p&gt;If you still didn&amp;rsquo;t check it out, you really should as it can save you 100+ hours by letting you automate a lot of repetitive code in your projects, from writing mocks through SwiftUI and Snapshots.&lt;/p&gt;

&lt;p&gt;Now let me tell you a bit about what Xcode extension offer and a couple of ideas for what Xcode team could add in future releases, to make tools like &lt;a href=&#34;https://www.merowing.info/sourcery-pro&#34;&gt;Sourcery Pro&lt;/a&gt; more powerful.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Introducing Sourcery Pro</title>
      <link>https://www.merowing.info/2021/04/introducing-sourcery-pro/</link>
      <pubDate>Thu, 08 Apr 2021 10:43:04 +0100</pubDate>
      
      <guid>https://www.merowing.info/2021/04/introducing-sourcery-pro/</guid>
      <description>&lt;p&gt;Today I&amp;rsquo;m happy to announce a new mac app that extends Xcode features.&lt;/p&gt;

&lt;p&gt;This is an effort of over 1000 hours, so if there was ever time to show your support for all the open source work I&amp;rsquo;ve done, it&amp;rsquo;s now.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.merowing.info/sourcery-pro/&#34; title=&#34;Read More&#34;&gt;Read more&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>The Decade in Review</title>
      <link>https://www.merowing.info/2021/03/the-decade-in-review/</link>
      <pubDate>Mon, 15 Mar 2021 10:43:04 +0100</pubDate>
      
      <guid>https://www.merowing.info/2021/03/the-decade-in-review/</guid>
      <description>&lt;p&gt;Lately, I&amp;rsquo;ve spent a significant amount of time thinking about my career: what I&amp;rsquo;ve done so far and what might lie ahead for me.&lt;/p&gt;

&lt;p&gt;To gain some perspective, I&amp;rsquo;ve decided to journal some of the things I&amp;rsquo;ve done over the last decade, and to share that with you.&lt;/p&gt;

&lt;p&gt;So below you will find some of my projects for the Cocoa community, as well as the highlights of commercial work I enjoyed and can talk about (NDA&amp;rsquo;s).&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Improve build times by extracting 3rd party tooling to processing script.</title>
      <link>https://www.merowing.info/2021/01/improve-build-times-by-extracting-3rd-party-tooling-to-processing-script./</link>
      <pubDate>Mon, 18 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://www.merowing.info/2021/01/improve-build-times-by-extracting-3rd-party-tooling-to-processing-script./</guid>
      <description>&lt;p&gt;A lot has been written about improving Swift compile times, but the compiler and linker are just part of the equation that slows down our development cycle.&lt;/p&gt;

&lt;p&gt;Most projects leverage great 3rd party tools like &lt;a href=&#34;https://github.com/realm/SwiftLint&#34;&gt;SwiftLint&lt;/a&gt;, &lt;a href=&#34;https://github.com/krzysztofzablocki/Sourcery&#34;&gt;Sourcery&lt;/a&gt;, &lt;a href=&#34;https://github.com/SwiftGen/SwiftGen&#34;&gt;SwiftGen&lt;/a&gt;, &lt;a href=&#34;https://github.com/nicklockwood/SwiftFormat&#34;&gt;SwiftFormat&lt;/a&gt; and many more. Leveraging those tools is the right thing to do but we have to be aware that all of those tools come with some time delay for our &lt;code&gt;build -&amp;gt; run&lt;/code&gt; development cycle.&lt;/p&gt;

&lt;p&gt;We often set those tools to run as build-phases which means they run each time you attempt a build but &lt;strong&gt;none of those tools need to be run each time we build&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Even tools that generate code we need for our projects like &lt;a href=&#34;https://github.com/krzysztofzablocki/Sourcery&#34;&gt;Sourcery&lt;/a&gt; or &lt;a href=&#34;https://github.com/SwiftGen/SwiftGen&#34;&gt;SwiftGen&lt;/a&gt; don&amp;rsquo;t need to be re-run unless we made changes in very specific parts of the application.&lt;/p&gt;

&lt;p&gt;As an example &lt;a href=&#34;http://nytimes.com&#34;&gt;New York Times&lt;/a&gt; main application leverages a lot of 3rd party and internal tooling, the total time all the tools take is 6s on my (powerful) machine.&lt;/p&gt;

&lt;p&gt;Only 6 seconds or as much as 6 seconds?
Let&amp;rsquo;s put this into context:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;I build a project between 200-400 times on an average workday.&lt;/li&gt;
&lt;li&gt;Let&amp;rsquo;s assume 90% of the time we don&amp;rsquo;t need to run those tools with each build.&lt;/li&gt;
&lt;li&gt;We have 30 iOS developers working on the main app&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Lower limit: 200 * 6s * 30 * 90* =&amp;gt; &lt;strong&gt;9 hours wasted per day&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;We are wasting 45 hours per week&lt;/strong&gt;, if we can improve that it&amp;rsquo;s almost like hiring a new full-time developer, except it&amp;rsquo;s free.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s look at how we can improve this with a process change a dash of &lt;code&gt;bash&lt;/code&gt; shell programming.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Adding support for versioning and migration to your Codable models.</title>
      <link>https://www.merowing.info/2020/06/adding-support-for-versioning-and-migration-to-your-codable-models./</link>
      <pubDate>Wed, 10 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.merowing.info/2020/06/adding-support-for-versioning-and-migration-to-your-codable-models./</guid>
      <description>&lt;p&gt;&lt;code&gt;Codable&lt;/code&gt; is a great protocol for automating simple model persistence, but it lacks support for any kind of versioning or migrating the data from older versions.&lt;/p&gt;

&lt;p&gt;You can, of course, implement custom &lt;code&gt;Codable&lt;/code&gt; adherence and throw in a bunch of if statements and manual decoding to achieve this goal, but isn&amp;rsquo;t that kind of killing the main selling point of &lt;code&gt;Codable&lt;/code&gt;?&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s look at an idea that adds Versoning yet still leverages derived &lt;code&gt;Codable&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Straighforward Data Snapshots</title>
      <link>https://www.merowing.info/2019/07/straighforward-data-snapshots/</link>
      <pubDate>Mon, 15 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.merowing.info/2019/07/straighforward-data-snapshots/</guid>
      <description>&lt;p&gt;If your app has a lot of content, chances are that by the time you get a chance to work on a bug report, the data that the bug appeared on will be long gone.&lt;/p&gt;

&lt;p&gt;Here are some tidbits on how I created a simple solution for that problem at &lt;a href=&#34;http://nytimes.com&#34;&gt;The New York Times&lt;/a&gt;, it&amp;rsquo;s based on a simple idea.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Finding exact difference between 2 instances</title>
      <link>https://www.merowing.info/2017/10/finding-exact-difference-between-2-instances/</link>
      <pubDate>Wed, 18 Oct 2017 12:30:51 +0200</pubDate>
      
      <guid>https://www.merowing.info/2017/10/finding-exact-difference-between-2-instances/</guid>
      <description>&lt;p&gt;Have you ever written tests? Usually, they use equality asserts, e.g. XCTAssertEqual, what happens if the object isn&amp;rsquo;t equal? Xcode throws a wall of text at you:&lt;/p&gt;


&lt;figure class=&#34;center&#34;&gt;
    
        &lt;img src=&#34;https://raw.githubusercontent.com/krzysztofzablocki/Difference/master/Resources/before.png&#34;  /&gt;
    
    
&lt;/figure&gt;



&lt;p&gt;This forces you to manually scan the text and try to figure out exactly whats wrong, what if instead you could just learn which property is different?&lt;/p&gt;


&lt;figure class=&#34;center&#34;&gt;
    
        &lt;img src=&#34;https://raw.githubusercontent.com/krzysztofzablocki/Difference/master/Resources/after.png&#34;  /&gt;
    
    
&lt;/figure&gt;



&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>How to find retain cycles and memory leaks sooner</title>
      <link>https://www.merowing.info/2017/10/how-to-find-retain-cycles-and-memory-leaks-sooner/</link>
      <pubDate>Sun, 01 Oct 2017 12:30:51 +0200</pubDate>
      
      <guid>https://www.merowing.info/2017/10/how-to-find-retain-cycles-and-memory-leaks-sooner/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/krzysztofzablocki/LifetimeTracker&#34;&gt;
&lt;figure class=&#34;center&#34;&gt;
    
        &lt;img src=&#34;https://raw.githubusercontent.com/krzysztofzablocki/LifetimeTracker/master/Resources/demo-circular.gif&#34;  /&gt;
    
    
&lt;/figure&gt;

&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;LifetimeTracker can surface retain cycle / memory issues right as you develop your application, and it will surface them to you immediately, so you can find them with more ease.&lt;/p&gt;

&lt;p&gt;Instruments and Memory Graph Debugger are great, but too many times developers forget to check for issues as they close the feature implementation.&lt;/p&gt;

&lt;p&gt;If you use those tools sporadicaly many of the issues they surface will require you to investigate the cause, and cost you a lot of time in the process.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Metaprogramming in Swift talk</title>
      <link>https://www.merowing.info/2017/05/metaprogramming-in-swift-talk/</link>
      <pubDate>Wed, 03 May 2017 08:04:14 +0200</pubDate>
      
      <guid>https://www.merowing.info/2017/05/metaprogramming-in-swift-talk/</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve recently spoke at &lt;a href=&#34;https://craft-conf.com&#34;&gt;CraftConf&lt;/a&gt; about metaprogramming in Swift using my &lt;a href=&#34;https://github.com/krzysztofzablocki/Sourcery&#34;&gt;Sourcery&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can watch the talk online:&lt;/p&gt;

&lt;iframe width=&#34;728&#34; height=&#34;409&#34; src=&#34;http://www.ustream.tv/embed/recorded/102903026?html5ui&#34; scrolling=&#34;no&#34; allowfullscreen webkitallowfullscreen frameborder=&#34;0&#34; style=&#34;border: 0 none transparent;&#34;&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Using protocol compositon for dependency injection</title>
      <link>https://www.merowing.info/2017/04/using-protocol-compositon-for-dependency-injection/</link>
      <pubDate>Wed, 12 Apr 2017 18:13:31 +0200</pubDate>
      
      <guid>https://www.merowing.info/2017/04/using-protocol-compositon-for-dependency-injection/</guid>
      <description>&lt;figure class=&#34;center&#34;&gt;
    
        &lt;img src=&#34;https://www.merowing.info/2017/04/RefactorSwift.jpg&#34;  /&gt;
    
    
&lt;/figure&gt;



&lt;p&gt;I like using composition and dependency injection, but when you need to inject each entity with multiple dependencies, it can get cumbersome fast.&lt;/p&gt;

&lt;p&gt;As the project grows and you need to inject more dependencies into your objects, you will end up having to refactor your methods a lot of times, as we all know Xcode doesn&amp;rsquo;t help with that.&lt;/p&gt;

&lt;p&gt;There is a more manageable way.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Stop weak-strong dance</title>
      <link>https://www.merowing.info/2017/04/stop-weak-strong-dance/</link>
      <pubDate>Mon, 03 Apr 2017 16:52:42 +0200</pubDate>
      
      <guid>https://www.merowing.info/2017/04/stop-weak-strong-dance/</guid>
      <description>&lt;p&gt;Closures in Swift are extremely useful, they are interchangeable with functions and that creates a lot of opportunities for useful use-cases. One thing we have to be careful when using them is to avoid &lt;strong&gt;retain cycles&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;We have to do it so often that it begs the question:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Can we improve the call-site API?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Swift Coders interview</title>
      <link>https://www.merowing.info/2017/02/swift-coders-interview/</link>
      <pubDate>Thu, 02 Feb 2017 18:50:14 +0100</pubDate>
      
      <guid>https://www.merowing.info/2017/02/swift-coders-interview/</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve been interviewed at Swift Coders podcast:&lt;/p&gt;

&lt;iframe id=&#34;audio_iframe&#34; src=&#34;https://www.podbean.com/media/player/6eh75-6737ed?skin=103&#34; width=&#34;100%&#34; height=&#34;100&#34; frameborder=&#34;0&#34; scrolling=&#34;no&#34;&gt;&lt;/iframe&gt;

&lt;p&gt;I&amp;rsquo;m definitely investing into a better Microphone next time I&amp;rsquo;m doing any audio recording.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://benscheirman.com/2017/01/an-affordable-dynamic-mic-recommendation/&#34;&gt;Ben Scheirman from NSPodcast has good recommendations for affordable microphone&lt;/a&gt;
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Seniority</title>
      <link>https://www.merowing.info/2017/01/seniority/</link>
      <pubDate>Wed, 18 Jan 2017 15:43:04 +0100</pubDate>
      
      <guid>https://www.merowing.info/2017/01/seniority/</guid>
      <description>&lt;p&gt;People use different words to classify Engineer skill, some companies give you more senior role just based on a number of years you have been working there, but what does it mean to be Senior?&lt;/p&gt;

&lt;p&gt;In this article, I composed a complete and final list of API&amp;rsquo;s that you need to know to classify yourself as Senior Engineer.&lt;/p&gt;

&lt;p&gt;Here’s a list of all the APIs you must know:&lt;/p&gt;

&lt;p&gt;•&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Testing iOS Apps</title>
      <link>https://www.merowing.info/2017/01/testing-ios-apps/</link>
      <pubDate>Wed, 11 Jan 2017 09:17:47 +0200</pubDate>
      
      <guid>https://www.merowing.info/2017/01/testing-ios-apps/</guid>
      <description>&lt;figure class=&#34;center&#34;&gt;
    
        &lt;img src=&#34;https://www.merowing.info/2017/01/testing.png&#34;  /&gt;
    
    
&lt;/figure&gt;



&lt;p&gt;Writing tests in iOS apps is a touchy subject. Not everyone is so privileged to be able to write tests full-time, for different reasons.&lt;/p&gt;

&lt;p&gt;Some people have full control over their development process and choose not to write tests, maybe because they have had a bad experience with it or they just don&amp;rsquo;t see the value in them.&lt;/p&gt;

&lt;p&gt;I would argue that if you are part of a smaller team, tests can even be more helpful than in big corporations.&lt;/p&gt;

&lt;p&gt;A big corporation might have dedicated QA team, but if you are one of 2 developers, then you are often responsible for ensuring quality and reliability of your work, its considerable pressure because each feature you write might break something else in your app.&lt;/p&gt;

&lt;p&gt;Let us look at practices and tips for writing maintainable tests in your iOS Apps.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>How hard would it be to adjust your iOS app in real-time?</title>
      <link>https://www.merowing.info/2017/01/how-hard-would-it-be-to-adjust-your-ios-app-in-real-time/</link>
      <pubDate>Mon, 02 Jan 2017 17:21:09 +0200</pubDate>
      
      <guid>https://www.merowing.info/2017/01/how-hard-would-it-be-to-adjust-your-ios-app-in-real-time/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/krzysztofzablocki/Traits&#34;&gt;
&lt;figure class=&#34;center&#34;&gt;
    
        &lt;img src=&#34;https://www.merowing.info/2017/01/demo.gif&#34;  /&gt;
    
    
&lt;/figure&gt;

&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Iterating over design that needs to be reflected in code can be tedious and time-consuming.&lt;/p&gt;

&lt;p&gt;Typically the designer works in graphics editing software and then submits flat art to the developer who implements the design in code. Refining the design requires going through the same laborious process.&lt;/p&gt;

&lt;p&gt;Even harder if we want to support multiple themes in our apps. How would we even approach that if we were using Interface Builder?&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s look at how we can approach implementing a simple library that could solve all of the above concerns.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Meta-programming in Swift</title>
      <link>https://www.merowing.info/2016/12/introducing-sourcery/</link>
      <pubDate>Wed, 14 Dec 2016 11:54:13 +0100</pubDate>
      
      <guid>https://www.merowing.info/2016/12/introducing-sourcery/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/krzysztofzablocki/Sourcery&#34;&gt;
&lt;figure class=&#34;center&#34;&gt;
    
        &lt;img src=&#34;https://www.merowing.info/2016/12/daemon.gif&#34;  /&gt;
    
    
&lt;/figure&gt;

&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Swift has very limited runtime support and no meta-programming features.&lt;/p&gt;

&lt;p&gt;I created a new tool that changes that, it&amp;rsquo;s called &lt;a href=&#34;https://github.com/krzysztofzablocki/Sourcery&#34;&gt;Sourcery&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Using it offers many benefits:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Write less repetitive code and make it easy to adhere to &lt;a href=&#34;https://en.wikipedia.org/wiki/Don&#39;t_repeat_yourself&#34;&gt;DRY principle&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;It allows you to create better code, one that would be hard to maintain without it, e.g. &lt;a href=&#34;https://github.com/krzysztofzablocki/Sourcery/blob/master/Sourcery/Templates/Diffable.stencil&#34;&gt;performing automatic property level difference in tests&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Limits the risk of introducing human error when refactoring.&lt;/li&gt;
&lt;li&gt;Sourcery &lt;strong&gt;doesn&amp;rsquo;t use runtime tricks&lt;/strong&gt;, in fact, it allows you to leverage compiler, even more, creating more safety.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Immediate feedback:&lt;/strong&gt; Sourcery features built-in daemon support, enabling you to write your templates in real-time side-by-side with generated code.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Better MVVM setup with POP and Runtime</title>
      <link>https://www.merowing.info/2016/08/better-mvvm-setup-with-pop-and-runtime/</link>
      <pubDate>Wed, 17 Aug 2016 18:17:19 +0200</pubDate>
      
      <guid>https://www.merowing.info/2016/08/better-mvvm-setup-with-pop-and-runtime/</guid>
      <description>&lt;figure class=&#34;center&#34;&gt;
    
        &lt;img src=&#34;https://www.merowing.info/2016/08/better-mvvm.png&#34;  /&gt;
    
    
&lt;/figure&gt;



&lt;p&gt;Even if we are writing pure Swift code in our app, we still deal with Objective-C Frameworks like UIKit.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s take a look at how we can improve our MVVM architecture by leveraging a little bit of Objective-C runtime and Protocol Oriented Programming.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Investing time into developer tools</title>
      <link>https://www.merowing.info/2016/08/investing-time-into-developer-tools/</link>
      <pubDate>Mon, 08 Aug 2016 12:47:33 +0200</pubDate>
      
      <guid>https://www.merowing.info/2016/08/investing-time-into-developer-tools/</guid>
      <description>&lt;figure class=&#34;center&#34;&gt;
    
        &lt;img src=&#34;https://www.merowing.info/2016/08/file-watchers.gif&#34;  /&gt;
    
    
&lt;/figure&gt;



&lt;p&gt;As I open source &lt;a href=&#34;https://github.com/krzysztofzablocki/KZFileWatchers&#34;&gt;another framework&lt;/a&gt; this week, I wanted to share few thoughts about building developer tools.&lt;/p&gt;

&lt;p&gt;Developers are lazy creatures, we like to automate stuff, we write scripts, use File Automation to get rid of repetitive work.&lt;/p&gt;

&lt;p&gt;One would think that we&amp;rsquo;d use the same principles in our jobs, yet I&amp;rsquo;m constantly surprised how few developers actually invest their time into building tools and setting up processes inside their app to ease their day to day work.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Setting up pre-commit hook for iOS</title>
      <link>https://www.merowing.info/2016/08/setting-up-pre-commit-hook-for-ios/</link>
      <pubDate>Wed, 03 Aug 2016 12:12:55 +0200</pubDate>
      
      <guid>https://www.merowing.info/2016/08/setting-up-pre-commit-hook-for-ios/</guid>
      <description>&lt;figure class=&#34;center&#34;&gt;
    
        &lt;img src=&#34;https://www.merowing.info/2016/08/git-up.png&#34;  /&gt;
    
    
&lt;/figure&gt;



&lt;p&gt;Many of us already write unit tests and run continuous integration servers, we can also leverage great tools like &lt;a href=&#34;https://github.com/danger/danger#what-is-danger&#34;&gt;Danger&lt;/a&gt; to easily add some checks to the pull requests.&lt;/p&gt;

&lt;p&gt;If we&amp;rsquo;d like to prevent some common mistakes from appearing in the repo in the first place, we can use &lt;strong&gt;pre-commit&lt;/strong&gt; hook.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Logging in Swift</title>
      <link>https://www.merowing.info/2016/07/logging-in-swift/</link>
      <pubDate>Wed, 13 Jul 2016 17:36:06 +0200</pubDate>
      
      <guid>https://www.merowing.info/2016/07/logging-in-swift/</guid>
      <description>&lt;p&gt;Logging is one of the rare cases when you could probably justify having a singleton, but with Swift Protocol Extension you don&amp;rsquo;t need to.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s integrate Logging in a way that:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Doesn&amp;rsquo;t cause 3rd party dependencies to leak across your codebase&lt;/li&gt;
&lt;li&gt;Hides the existence of singleton from the codebase&lt;/li&gt;
&lt;li&gt;Supports writing fully testable code&lt;/li&gt;
&lt;li&gt;Ability to suppress logs from specific modules or classes&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>iOS Architecture</title>
      <link>https://www.merowing.info/2016/06/ios-architecture/</link>
      <pubDate>Mon, 27 Jun 2016 00:00:00 +0000</pubDate>
      
      <guid>https://www.merowing.info/2016/06/ios-architecture/</guid>
      <description>&lt;p&gt;I recently did a talk in Prague about iOS Application Architecture, you can &lt;a href=&#34;http://slideslive.com/38897361/good-ios-application-architecture&#34;&gt;watch it here.&lt;/a&gt;
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>8 Books that everyone should read</title>
      <link>https://www.merowing.info/2016/02/8-books-that-everyone-should-read/</link>
      <pubDate>Wed, 03 Feb 2016 13:13:48 +0100</pubDate>
      
      <guid>https://www.merowing.info/2016/02/8-books-that-everyone-should-read/</guid>
      <description>&lt;figure class=&#34;center&#34;&gt;
    
        &lt;img src=&#34;https://www.merowing.info/2016/02/books.png&#34;  /&gt;
    
    
&lt;/figure&gt;



&lt;p&gt;Looking for new books to read?&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Programming</title>
      <link>https://www.merowing.info/2016/01/programming/</link>
      <pubDate>Thu, 14 Jan 2016 16:21:06 +0100</pubDate>
      
      <guid>https://www.merowing.info/2016/01/programming/</guid>
      <description>&lt;figure class=&#34;center&#34;&gt;
    
        &lt;img src=&#34;https://www.merowing.info/2016/01/programming.png&#34;  /&gt;
    
    
&lt;/figure&gt;



&lt;p&gt;What is programming?&lt;/p&gt;

&lt;p&gt;For me it has always been about solving problems, and analytical thinking.&lt;/p&gt;

&lt;p&gt;Does it matter what language or platform you solve problems on? How do you learn more on your selected platform?&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Improve your iOS Architecture with FlowControllers</title>
      <link>https://www.merowing.info/2016/01/improve-your-ios-architecture-with-flowcontrollers/</link>
      <pubDate>Tue, 05 Jan 2016 11:23:46 +0100</pubDate>
      
      <guid>https://www.merowing.info/2016/01/improve-your-ios-architecture-with-flowcontrollers/</guid>
      <description>&lt;p&gt;When working on iOS app, now more than ever one should avoid having view controllers pushing other view controllers around.&lt;/p&gt;

&lt;p&gt;Why?&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Little things that can make your life easier in 2016</title>
      <link>https://www.merowing.info/2015/12/little-things-that-can-make-your-life-easier-in-2016/</link>
      <pubDate>Wed, 23 Dec 2015 10:31:43 +0100</pubDate>
      
      <guid>https://www.merowing.info/2015/12/little-things-that-can-make-your-life-easier-in-2016/</guid>
      <description>&lt;p&gt;As we are closing this year, let&amp;rsquo;s take a look at few simple things you can add to your iOS developer toolbox to make your life easier and be more productive in 2016.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Details matter - harnessing the power of Core Animation</title>
      <link>https://www.merowing.info/2015/12/details-matter---harnessing-the-power-of-coreanimation/</link>
      <pubDate>Wed, 16 Dec 2015 22:23:13 +0100</pubDate>
      
      <guid>https://www.merowing.info/2015/12/details-matter---harnessing-the-power-of-coreanimation/</guid>
      <description>&lt;p&gt;A friend showed me animations from &lt;a href=&#34;https://medium.com/bridge-collection/improve-the-payment-experience-with-animations-3d1b0a9b810e#.15j1me98l&#34;&gt;Stripe Checkout&lt;/a&gt; and asked: &amp;ldquo;how could we implement that on iOS?&amp;rdquo;&lt;/p&gt;

&lt;p&gt;Quite simply, Core Animation is very powerful and if one learns how to harness that power, they do not need write a lot of code.&lt;/p&gt;

&lt;video autoplay loop&gt;
  &lt;source src=&#34;https://www.merowing.info/2015/12/details.mov&#34; type=&#34;video/mp4&#34;&gt;
&lt;/video&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Writing Xcode plugin in Swift</title>
      <link>https://www.merowing.info/2015/12/writing-xcode-plugin-in-swift/</link>
      <pubDate>Tue, 08 Dec 2015 11:07:09 +0100</pubDate>
      
      <guid>https://www.merowing.info/2015/12/writing-xcode-plugin-in-swift/</guid>
      <description>&lt;figure class=&#34;center&#34;&gt;
    
        &lt;img src=&#34;https://www.merowing.info/2015/12/logs.gif&#34;  /&gt;
    
    
&lt;/figure&gt;



&lt;p&gt;I&amp;rsquo;ve found myself using Xcode a lot more than I did in Objective-C.&lt;/p&gt;

&lt;p&gt;One of things I’ve missed a lot from my &lt;a href=&#34;https://www.jetbrains.com/objc/&#34;&gt;AppCode&lt;/a&gt; setup, is the  ability to jump to specific file &amp;amp; line that logged a console message.&lt;/p&gt;

&lt;p&gt;Because Xcode doesn’t offer such functionality and because I do not like to complain, I’ve decided to write my own plugin for it.&lt;/p&gt;

&lt;p&gt;I wrote it in Swift.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>The beauty of imperfection</title>
      <link>https://www.merowing.info/2015/11/the-beauty-of-imperfection/</link>
      <pubDate>Tue, 24 Nov 2015 12:29:37 +0100</pubDate>
      
      <guid>https://www.merowing.info/2015/11/the-beauty-of-imperfection/</guid>
      <description>&lt;video autoplay loop&gt;
  &lt;source src=&#34;https://www.merowing.info/2015/12/dot-animated.mov&#34; type=&#34;video/mp4&#34;&gt;
&lt;/video&gt;

&lt;p&gt;Perfection is not something one can truly achieve, so it’s very smart that one of the best meditation services called &lt;a href=&#34;https://www.headspace.com&#34;&gt;Headspace&lt;/a&gt; is using an imperfect dot as their brand logo.&lt;/p&gt;

&lt;p&gt;If you ever used their iOS app, you can notice how their dot slightly deforms, captivating your focus.&lt;/p&gt;

&lt;p&gt;When it comes to graphics, if you are able to cheat (if user can’t tell the difference) and make tech stuff easier, just do it.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Swift init()</title>
      <link>https://www.merowing.info/2015/11/swift-init/</link>
      <pubDate>Tue, 17 Nov 2015 13:51:00 +0100</pubDate>
      
      <guid>https://www.merowing.info/2015/11/swift-init/</guid>
      <description>&lt;p&gt;With Swift strong typing and immutability, there are rules that prevent you from accesing variables until an object is fully initialized.&lt;/p&gt;

&lt;p&gt;I do not like having a function do more than one thing, so I like to split my initializers into multiple functions, this becomes problematic.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Tips for Interface Builder</title>
      <link>https://www.merowing.info/2015/11/tips-for-interface-builder/</link>
      <pubDate>Fri, 13 Nov 2015 00:00:00 +0000</pubDate>
      
      <guid>https://www.merowing.info/2015/11/tips-for-interface-builder/</guid>
      <description>&lt;p&gt;Young developers are happy when they write a lot of code, they like to brag about that project that has tens of thousands lines of code they wrote.&lt;/p&gt;

&lt;p&gt;As we get more experienced, we realize that code is expensive. It&amp;rsquo;s expensive to maintain, debug and reason about.&lt;/p&gt;

&lt;p&gt;That&amp;rsquo;s why we should aim to use tools that can help us avoid writing boilerplate code, one of those tools is Interface Builder.&lt;/p&gt;

&lt;p&gt;Here are a few of my favourite tips &amp;amp; tricks.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Prototyping floating burger menu with CAShapeLayer</title>
      <link>https://www.merowing.info/2015/11/prototyping-floating-burger-menu-with-cashapelayer/</link>
      <pubDate>Wed, 04 Nov 2015 13:29:44 +0100</pubDate>
      
      <guid>https://www.merowing.info/2015/11/prototyping-floating-burger-menu-with-cashapelayer/</guid>
      <description>&lt;video autoplay loop&gt;
  &lt;source src=&#34;https://www.merowing.info/2015/11/Header-small.mp4&#34; type=&#34;video/mp4&#34;&gt;
&lt;/video&gt;

&lt;p&gt;Reproducing above effect is very simple with CAShapeLayer and CoreAnimation&amp;hellip;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Simple way to scrape web with Ruby</title>
      <link>https://www.merowing.info/2015/01/extracting-data-from-websites-without-api/</link>
      <pubDate>Thu, 15 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>https://www.merowing.info/2015/01/extracting-data-from-websites-without-api/</guid>
      <description>&lt;p&gt;MyFitnessPal didn&amp;rsquo;t give me API access, so I wrote some Ruby to get it anyway.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Playgrounds for Objective C</title>
      <link>https://www.merowing.info/2014/10/playgrounds-for-objective-c/</link>
      <pubDate>Thu, 23 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>https://www.merowing.info/2014/10/playgrounds-for-objective-c/</guid>
      <description>&lt;p&gt;Playgrounds are one of the niftiest features of Swift.&lt;/p&gt;

&lt;p&gt;They allow you to quickly test out bits of code and see results in real time without going through the traditional edit-compile-run-debug cycle.&lt;/p&gt;

&lt;p&gt;&amp;ldquo;But surely playgrounds aren&amp;rsquo;t possible in Objective-C?&amp;rdquo; you say&amp;hellip; Think again.&lt;/p&gt;

&lt;div 
class=&#34;magnific-video mpf-iframe embed video-player &#34;&gt;
	&lt;iframe src=&#34;https://player.vimeo.com/video/109757619&#34; type=&#34;text/html&#34;
		allowfullscreen
		frameborder=&#34;0&#34;
		width=&#34;100%&#34;
		height=&#34;385&#34;
	&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;h3 id=&#34;features&#34;&gt;Features&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Faster than Swift playgrounds (a lot)&lt;/li&gt;
&lt;li&gt;Extra controls for tweaking:&lt;/li&gt;
&lt;li&gt;Adjustable values&lt;/li&gt;
&lt;li&gt;Autoanimated values&lt;/li&gt;
&lt;li&gt;Buttons&lt;/li&gt;
&lt;li&gt;IDE agnostic, once you run it, you can modify the code even from vim.&lt;/li&gt;
&lt;li&gt;Full iOS simulator and access to all iOS features, so you can prototype production ready code.&lt;/li&gt;
&lt;li&gt;Nice DSL for rapid prototyping&lt;/li&gt;
&lt;li&gt;CocoaPods support, so you can add it to existing projects to experiment&lt;/li&gt;
&lt;li&gt;Open source, anyone can contribute to make them better!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/krzysztofzablocki/KZPlayground&#34;&gt;Source code on GitHub&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>iOS Project Bootstrap</title>
      <link>https://www.merowing.info/2014/10/ios-project-bootstrap/</link>
      <pubDate>Wed, 15 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>https://www.merowing.info/2014/10/ios-project-bootstrap/</guid>
      <description>&lt;p&gt;If you are looking for some good quality project settings and scripts, I&amp;rsquo;ve open-sources my bootstrap for upcoming 2015.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/krzysztofzablocki/KZBootstrap&#34;&gt;Check it out on github.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>How do I work?</title>
      <link>https://www.merowing.info/2014/10/how-do-i-work/</link>
      <pubDate>Mon, 06 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>https://www.merowing.info/2014/10/how-do-i-work/</guid>
      <description>&lt;p&gt;I’ve been programming for 20 years now, doing commercial work for the last 8.&lt;/p&gt;

&lt;p&gt;Over the years I’ve been exposed to different ideas and experiences that have constantly affected the way I work.&lt;/p&gt;

&lt;p&gt;What matters and how I go about working for my clients?
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>A Swift introduction into fitness</title>
      <link>https://www.merowing.info/2014/09/a-swift-introduction-into-fitness/</link>
      <pubDate>Tue, 30 Sep 2014 00:00:00 +0000</pubDate>
      
      <guid>https://www.merowing.info/2014/09/a-swift-introduction-into-fitness/</guid>
      <description>&lt;p&gt;Many people think getting fit is hard, the fitness industry is full of myths and unnecessary complications.&lt;/p&gt;

&lt;p&gt;Doesn’t matter if your goal is to lose weight or gain it, what matter is Physics and law of energy:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If you burn more calories than you eat you will lose weight&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Two questions arise:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;how to estimate our caloric needs?&lt;/li&gt;
&lt;li&gt;how fast should we lose or gain weight?&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;We&amp;rsquo;ll use Swift Playgrounds to explain it.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Writing less code</title>
      <link>https://www.merowing.info/2014/08/writing-less-code/</link>
      <pubDate>Wed, 27 Aug 2014 00:00:00 +0000</pubDate>
      
      <guid>https://www.merowing.info/2014/08/writing-less-code/</guid>
      <description>&lt;p&gt;What are some of my favorite techniques for cleaner and more readable code?&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Improving development speed</title>
      <link>https://www.merowing.info/2014/07/improving-development-speed/</link>
      <pubDate>Fri, 18 Jul 2014 00:00:00 +0000</pubDate>
      
      <guid>https://www.merowing.info/2014/07/improving-development-speed/</guid>
      <description>&lt;p&gt;I wrote a blogpost about improving iteration speed and why code injection is awesome when you work on small changes.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.lextech.com/2014/07/3-big-ways-to-speed-up-your-development-cycle/&#34;&gt;Read it on Lextech blog&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Implementing observable in Swift</title>
      <link>https://www.merowing.info/2014/07/implementing-observable-in-swift/</link>
      <pubDate>Thu, 17 Jul 2014 00:00:00 +0000</pubDate>
      
      <guid>https://www.merowing.info/2014/07/implementing-observable-in-swift/</guid>
      <description>&lt;p&gt;KVO has been integral part of Cocoa programming, yet it&amp;rsquo;s not available for pure Swift classes.&lt;/p&gt;

&lt;p&gt;Is there a way to implement your own implementation of native KVO?
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Behaviours and Xcode 6</title>
      <link>https://www.merowing.info/2014/06/behaviours-and-xcode-6/</link>
      <pubDate>Sun, 22 Jun 2014 00:00:00 +0000</pubDate>
      
      <guid>https://www.merowing.info/2014/06/behaviours-and-xcode-6/</guid>
      <description>&lt;p&gt;Last time I&amp;rsquo;ve written about Behaviours in &lt;a href=&#34;http://www.objc.io/issue-13/behaviors.html&#34;&gt;objc.io&lt;/a&gt; Architecture Series.&lt;/p&gt;

&lt;p&gt;Xcode 6 has some great improvements, few people realise that &lt;strong&gt;IBInspectable&lt;/strong&gt; works on any class, not just views.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s use that to improve upon my original Behaviours.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>iOS App Architecture, Part 2: Data parsing</title>
      <link>https://www.merowing.info/2014/04/subjective-guide-to-writing-ios-apps-part-2-data-parsing/</link>
      <pubDate>Thu, 03 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>https://www.merowing.info/2014/04/subjective-guide-to-writing-ios-apps-part-2-data-parsing/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://www.merowing.info/2014/03/subjective-guide-to-writing-ios-apps-part-1-introduction&#34;&gt;Last time&lt;/a&gt; we set our project, this time we look at how we could create a simple yet flexible architecture for our model layer.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Refactoring tricks</title>
      <link>https://www.merowing.info/2014/03/refactoring-tricks/</link>
      <pubDate>Mon, 24 Mar 2014 00:00:00 +0000</pubDate>
      
      <guid>https://www.merowing.info/2014/03/refactoring-tricks/</guid>
      <description>&lt;p&gt;I believe in boy scout rule: &lt;em&gt;&amp;lsquo;Always leave the campground cleaner than you found it.&amp;rsquo;&lt;/em&gt;, that&amp;rsquo;s why I constantly refactor my code so it&amp;rsquo;s clean and tidy.&lt;/p&gt;

&lt;p&gt;What are few less-known refactoring tricks I use to simplify code and make it more readable?&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>7 most common code issues</title>
      <link>https://www.merowing.info/2014/03/7-most-common-code-issues/</link>
      <pubDate>Thu, 20 Mar 2014 00:00:00 +0000</pubDate>
      
      <guid>https://www.merowing.info/2014/03/7-most-common-code-issues/</guid>
      <description>&lt;p&gt;What are top 7 most common issues I find doing Code Reviews?&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>iOS App Architecture, Part 1: Setting up</title>
      <link>https://www.merowing.info/2014/03/subjective-guide-to-writing-ios-apps-part-1-introduction/</link>
      <pubDate>Fri, 14 Mar 2014 00:00:00 +0000</pubDate>
      
      <guid>https://www.merowing.info/2014/03/subjective-guide-to-writing-ios-apps-part-1-introduction/</guid>
      <description>&lt;p&gt;This will be subjective look at creating iOS app, first part will focus on basics like project setup, folder structure, version control and some quality metrics.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>iOS tips</title>
      <link>https://www.merowing.info/2014/02/ios-tips/</link>
      <pubDate>Thu, 20 Feb 2014 00:00:00 +0000</pubDate>
      
      <guid>https://www.merowing.info/2014/02/ios-tips/</guid>
      <description>&lt;p&gt;Easy to apply tips that can improve your development workflow.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Fit geek</title>
      <link>https://www.merowing.info/2014/02/fit-geek/</link>
      <pubDate>Mon, 10 Feb 2014 00:00:00 +0000</pubDate>
      
      <guid>https://www.merowing.info/2014/02/fit-geek/</guid>
      <description>&lt;p&gt;If you ever meet me you probably already know my second biggest passion after programming is Bodybuilding.
I used to be a fat kid weighting 105 kg, now I&amp;rsquo;m ripped.&lt;/p&gt;

&lt;p&gt;Want to learn how you too can become fit with ease?&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>iOS Developer Tools</title>
      <link>https://www.merowing.info/2014/02/ios-developer-tools/</link>
      <pubDate>Fri, 07 Feb 2014 00:00:00 +0000</pubDate>
      
      <guid>https://www.merowing.info/2014/02/ios-developer-tools/</guid>
      <description>&lt;p&gt;I probably spend too much money on apps, but I like to support other Developer&amp;rsquo;s good ideas.&lt;/p&gt;

&lt;p&gt;I recently gave talk about tools I use and why.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Stop writing data parsing code in your apps</title>
      <link>https://www.merowing.info/2013/07/stop-writing-data-parsing-code-in-your-apps/</link>
      <pubDate>Thu, 25 Jul 2013 00:00:00 +0000</pubDate>
      
      <guid>https://www.merowing.info/2013/07/stop-writing-data-parsing-code-in-your-apps/</guid>
      <description>&lt;p&gt;Data parsing is one of most common tasks we need to do in our apps, yet still majority of people do this parsing by hand, always repeating the same code for each class they need to map.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ll show show you how you could simplify your code and make it more readable at the same time.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Expanded use of asserts</title>
      <link>https://www.merowing.info/2013/07/expanded-use-of-asserts/</link>
      <pubDate>Wed, 03 Jul 2013 00:00:00 +0000</pubDate>
      
      <guid>https://www.merowing.info/2013/07/expanded-use-of-asserts/</guid>
      <description>&lt;p&gt;Do you use assertions in your code? What for? How do you handle release builds ?&lt;/p&gt;

&lt;p&gt;There is a better way than NSAssert&amp;hellip;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Crafter - setup your cocoa projects with ease</title>
      <link>https://www.merowing.info/2013/05/crafter---setup-your-cocoa-projects-with-ease/</link>
      <pubDate>Thu, 02 May 2013 00:00:00 +0000</pubDate>
      
      <guid>https://www.merowing.info/2013/05/crafter---setup-your-cocoa-projects-with-ease/</guid>
      <description>&lt;p&gt;How do you setup your Cocoa projects?
Do you always set same warnings, clone configurations and do bunch of other stuff?&lt;/p&gt;

&lt;p&gt;I made a tool that might help.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Statusboard and Jenkins</title>
      <link>https://www.merowing.info/2013/04/statusboard-and-jenkins/</link>
      <pubDate>Thu, 11 Apr 2013 00:00:00 +0000</pubDate>
      
      <guid>https://www.merowing.info/2013/04/statusboard-and-jenkins/</guid>
      <description>&lt;figure class=&#34;center&#34;&gt;
    
        &lt;img src=&#34;https://www.merowing.info/2013/04/statusboard-small.jpg&#34;  /&gt;
    
    
&lt;/figure&gt;



&lt;p&gt;You probably saw &lt;a href=&#34;http://panic.com/statusboard/&#34;&gt;StatusBoard by Panic&lt;/a&gt;. I&amp;rsquo;ve immediately thought it needs simple Jenkins widget.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>iOS Game with Interface Builder</title>
      <link>https://www.merowing.info/2013/04/learn-ios-game-dev-level-0/</link>
      <pubDate>Thu, 11 Apr 2013 00:00:00 +0000</pubDate>
      
      <guid>https://www.merowing.info/2013/04/learn-ios-game-dev-level-0/</guid>
      <description>&lt;figure &gt;
    
        &lt;img src=&#34;https://www.merowing.info/2013/04/clone-small.png&#34;  /&gt;
    
    
&lt;/figure&gt;



&lt;p&gt;By the end of this tutorial you will have a simple game with level editor under 250 lines of code.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Overlaying application version on top of your icon</title>
      <link>https://www.merowing.info/2013/03/overlaying-application-version-on-top-of-your-icon/</link>
      <pubDate>Thu, 07 Mar 2013 00:00:00 +0000</pubDate>
      
      <guid>https://www.merowing.info/2013/03/overlaying-application-version-on-top-of-your-icon/</guid>
      <description>&lt;figure class=&#34;center&#34;&gt;
    
        &lt;img src=&#34;https://www.merowing.info/2013/03/Icon.png&#34;  /&gt;
    
    
&lt;/figure&gt;



&lt;p&gt;I&amp;rsquo;ve just returned from NSConference #5, there were many good talks there, but my favourite one was the one about Flipboard development tools/setup by Evan Doll.&lt;/p&gt;

&lt;p&gt;Especially how they add version information on top of the icons.
Unfortunately they didn&amp;rsquo;t share it with us.&lt;/p&gt;

&lt;p&gt;So I wrote my own.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Quick tip for Interface Builder</title>
      <link>https://www.merowing.info/2012/12/quick-tip-for-interface-builder/</link>
      <pubDate>Wed, 26 Dec 2012 00:00:00 +0000</pubDate>
      
      <guid>https://www.merowing.info/2012/12/quick-tip-for-interface-builder/</guid>
      <description>&lt;p&gt;Do you use Interface Builder ? Even if you don’t like IB, read this short tip and referenced articles.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Pinch to reveal animation, like in Boeing Milestones</title>
      <link>https://www.merowing.info/2012/07/pinch-to-reveal-animation-like-in-boeing-milestones/</link>
      <pubDate>Sun, 01 Jul 2012 00:00:00 +0000</pubDate>
      
      <guid>https://www.merowing.info/2012/07/pinch-to-reveal-animation-like-in-boeing-milestones/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://itunes.apple.com/us/app/boeing-milestones/id510294916?mt=8&#34;&gt;Boeing made a nice app for iPad&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I was shown this app and asked if it’s hard to do this pinch to reveal animation.
It’s actually quite easy to do with CoreAnimation.&lt;/p&gt;

&lt;video width=&#34;100%&#34; controls&gt;
  &lt;source src=&#34;https://www.merowing.info/2012/07/Boening-proof-of-concept.mp4&#34; type=&#34;video/mp4&#34;&gt;
Your browser does not support the video tag.
&lt;/video&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Programmers bad habits</title>
      <link>https://www.merowing.info/2012/05/programmers-bad-habits/</link>
      <pubDate>Tue, 29 May 2012 00:00:00 +0000</pubDate>
      
      <guid>https://www.merowing.info/2012/05/programmers-bad-habits/</guid>
      <description>&lt;figure class=&#34;center&#34;&gt;
    
        &lt;img src=&#34;https://www.merowing.info/2012/05/reuse.jpg&#34;  /&gt;
    
    
&lt;/figure&gt;



&lt;p&gt;We evolve and change our habits, probably many times every few years. Your code style changes, your approach to writing code in general.&lt;/p&gt;

&lt;p&gt;That’s usually good but sometimes bad habits are introduced into that process and remain with you for long time.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Drawing smooth lines with cocos2d ios inspired by Paper</title>
      <link>https://www.merowing.info/2012/04/drawing-smooth-lines-with-cocos2d-ios-inspired-by-paper/</link>
      <pubDate>Mon, 23 Apr 2012 00:00:00 +0000</pubDate>
      
      <guid>https://www.merowing.info/2012/04/drawing-smooth-lines-with-cocos2d-ios-inspired-by-paper/</guid>
      <description>&lt;p&gt;You’ve probably seen &lt;a href=&#34;http://www.fiftythree.com/&#34;&gt;Paper&lt;/a&gt;, the app is pretty cool and the drawings look really nice and smooth.&lt;/p&gt;

&lt;p&gt;I’m working on my personal app that needs something similar, and after doing some research I’ve not seen a proper solution.&lt;/p&gt;

&lt;p&gt;So I wrote one.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Automatic removal of NSNotificationCenter or KVO observers</title>
      <link>https://www.merowing.info/2012/03/automatic-removal-of-nsnotificationcenter-or-kvo-observers/</link>
      <pubDate>Wed, 28 Mar 2012 00:00:00 +0000</pubDate>
      
      <guid>https://www.merowing.info/2012/03/automatic-removal-of-nsnotificationcenter-or-kvo-observers/</guid>
      <description>&lt;p&gt;Observer pattern is common on iOS platform, you use observers in NSNotificationCenter and in Key Value Observing.&lt;/p&gt;

&lt;p&gt;You need to remember to unregister before you release your observer object, if you don’t you are going to have crashes.&lt;/p&gt;

&lt;p&gt;What if you could automate it ?
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>How to check if user touched anything in your ios app</title>
      <link>https://www.merowing.info/2012/03/how-to-check-if-user-touched-anything-in-your-ios-app/</link>
      <pubDate>Mon, 05 Mar 2012 00:00:00 +0000</pubDate>
      
      <guid>https://www.merowing.info/2012/03/how-to-check-if-user-touched-anything-in-your-ios-app/</guid>
      <description>&lt;p&gt;So you want to know when user is interacting with your app and you don’t really care which screen is he using or what is he doing.&lt;/p&gt;

&lt;p&gt;You only want to know when he touches your app, for example: you make a game and you would like to automatically go into pause mode if user didn’t use your app for N minutes…&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Using UIGestureRecognizers in cocos2d</title>
      <link>https://www.merowing.info/2012/03/using-uigesturerecognizers-in-cocos2d/</link>
      <pubDate>Mon, 05 Mar 2012 00:00:00 +0000</pubDate>
      
      <guid>https://www.merowing.info/2012/03/using-uigesturerecognizers-in-cocos2d/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://www.cocos2d-iphone.org/&#34;&gt;cocos2d&lt;/a&gt; is one of the best gaming framework I’ve seen, but it doesn’t use UIKit.&lt;/p&gt;

&lt;p&gt;When Apple introduced UIGestureRecognizers they unified how touch interaction should work.&lt;/p&gt;

&lt;p&gt;Is there a way we can add UIGestureRecognizers to cocos2d architecture, without modyfing cocos2d source?
&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>