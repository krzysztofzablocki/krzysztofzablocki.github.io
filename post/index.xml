<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>Posts on Krzysztof Zabłocki </title>
      <generator uri="https://gohugo.io">Hugo</generator>
    <link>http://merowing.info/post/</link>
    <language>en-us</language>
    
    
    <updated>Wed, 03 Aug 2016 12:12:55 &#43;0200</updated>
    
    <item>
      <title>Setting up pre-commit hook for iOS</title>
      <link>http://merowing.info/2016/08/setting-up-pre-commit-hook-for-ios/</link>
      <pubDate>Wed, 03 Aug 2016 12:12:55 &#43;0200</pubDate>
      
      <guid>http://merowing.info/2016/08/setting-up-pre-commit-hook-for-ios/</guid>
      <description>&lt;p&gt;
&lt;figure class=&#34;center&#34;&gt;
    
        &lt;img src=&#34;http://merowing.info/2016/08/git-up.png&#34;  /&gt;
    
    
&lt;/figure&gt;

&lt;/p&gt;

&lt;p&gt;Many of us already write unit tests and run continuous integration servers, we can also leverage great tools like &lt;a href=&#34;https://github.com/danger/danger#what-is-danger&#34;&gt;Danger&lt;/a&gt; to easily add some checks to the pull requests.&lt;/p&gt;

&lt;p&gt;If we&amp;rsquo;d like to prevent some common mistakes from appearing in the repo in the first place, we can use &lt;strong&gt;pre-commit&lt;/strong&gt; hook.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Logging in Swift</title>
      <link>http://merowing.info/2016/07/logging-in-swift/</link>
      <pubDate>Wed, 13 Jul 2016 17:36:06 &#43;0200</pubDate>
      
      <guid>http://merowing.info/2016/07/logging-in-swift/</guid>
      <description>&lt;p&gt;Logging is one of the rare cases when you could probably justify having a singleton, but with Swift Protocol Extension you don&amp;rsquo;t need to.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s integrate Logging in a way that:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Doesn&amp;rsquo;t cause 3rd party dependencies to leak across your codebase&lt;/li&gt;
&lt;li&gt;Hides the existence of singleton from the codebase&lt;/li&gt;
&lt;li&gt;Supports writing fully testable code&lt;/li&gt;
&lt;li&gt;Ability to suppress logs from specific modules or classes&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>iOS Architecture</title>
      <link>http://merowing.info/2016/06/ios-architecture/</link>
      <pubDate>Mon, 27 Jun 2016 00:00:00 UTC</pubDate>
      
      <guid>http://merowing.info/2016/06/ios-architecture/</guid>
      <description>&lt;p&gt;I recently did a talk in Prague about iOS Application Architecture, you can &lt;a href=&#34;http://slideslive.com/38897361/good-ios-application-architecture&#34;&gt;watch it here.&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>8 Books that everyone should read</title>
      <link>http://merowing.info/2016/02/8-books-that-everyone-should-read/</link>
      <pubDate>Wed, 03 Feb 2016 13:13:48 &#43;0100</pubDate>
      
      <guid>http://merowing.info/2016/02/8-books-that-everyone-should-read/</guid>
      <description>&lt;p&gt;
&lt;figure class=&#34;center&#34;&gt;
    
        &lt;img src=&#34;http://merowing.info/2016/02/books.png&#34;  /&gt;
    
    
&lt;/figure&gt;

&lt;/p&gt;

&lt;p&gt;Looking for new books to read?&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Programming</title>
      <link>http://merowing.info/2016/01/programming/</link>
      <pubDate>Thu, 14 Jan 2016 16:21:06 &#43;0100</pubDate>
      
      <guid>http://merowing.info/2016/01/programming/</guid>
      <description>&lt;p&gt;
&lt;figure class=&#34;center&#34;&gt;
    
        &lt;img src=&#34;http://merowing.info/2016/01/programming.png&#34;  /&gt;
    
    
&lt;/figure&gt;

&lt;/p&gt;

&lt;p&gt;What is programming?&lt;/p&gt;

&lt;p&gt;For me it has always been about solving problems, and analytical thinking.&lt;/p&gt;

&lt;p&gt;Does it matter what language or platform you solve problems on? How do you learn more on your selected platform?&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Improve your iOS Architecture with FlowControllers</title>
      <link>http://merowing.info/2016/01/improve-your-ios-architecture-with-flowcontrollers/</link>
      <pubDate>Tue, 05 Jan 2016 11:23:46 &#43;0100</pubDate>
      
      <guid>http://merowing.info/2016/01/improve-your-ios-architecture-with-flowcontrollers/</guid>
      <description>&lt;p&gt;When working on iOS app, now more than ever one should avoid having view controllers pushing other view controllers around.&lt;/p&gt;

&lt;p&gt;Why?&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Little things that can make your life easier in 2016</title>
      <link>http://merowing.info/2015/12/little-things-that-can-make-your-life-easier-in-2016/</link>
      <pubDate>Wed, 23 Dec 2015 10:31:43 &#43;0100</pubDate>
      
      <guid>http://merowing.info/2015/12/little-things-that-can-make-your-life-easier-in-2016/</guid>
      <description>&lt;p&gt;As we are closing this year, let&amp;rsquo;s take a look at few simple things you can add to your iOS developer toolbox to make your life easier and be more productive in 2016.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Details matter - harnessing the power of Core Animation</title>
      <link>http://merowing.info/2015/12/details-matter---harnessing-the-power-of-coreanimation/</link>
      <pubDate>Wed, 16 Dec 2015 22:23:13 &#43;0100</pubDate>
      
      <guid>http://merowing.info/2015/12/details-matter---harnessing-the-power-of-coreanimation/</guid>
      <description>&lt;p&gt;A friend showed me animations from &lt;a href=&#34;https://medium.com/bridge-collection/improve-the-payment-experience-with-animations-3d1b0a9b810e#.15j1me98l&#34;&gt;Stripe Checkout&lt;/a&gt; and asked: &amp;ldquo;how could we implement that on iOS?&amp;rdquo;&lt;/p&gt;

&lt;p&gt;Quite simply, Core Animation is very powerful and if one learns how to harness that power, they do not need write a lot of code.&lt;/p&gt;

&lt;video autoplay loop&gt;
  &lt;source src=&#34;http://merowing.info/2015/12/details.mov&#34; type=&#34;video/mp4&#34;&gt;
&lt;/video&gt;
</description>
    </item>
    
    <item>
      <title>Writing Xcode plugin in Swift</title>
      <link>http://merowing.info/2015/12/writing-xcode-plugin-in-swift/</link>
      <pubDate>Tue, 08 Dec 2015 11:07:09 &#43;0100</pubDate>
      
      <guid>http://merowing.info/2015/12/writing-xcode-plugin-in-swift/</guid>
      <description>&lt;p&gt;
&lt;figure class=&#34;center&#34;&gt;
    
        &lt;img src=&#34;http://merowing.info/2015/12/logs.gif&#34;  /&gt;
    
    
&lt;/figure&gt;

&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve found myself using Xcode a lot more than I did in Objective-C.&lt;/p&gt;

&lt;p&gt;One of things I’ve missed a lot from my &lt;a href=&#34;https://www.jetbrains.com/objc/&#34;&gt;AppCode&lt;/a&gt; setup, is the  ability to jump to specific file &amp;amp; line that logged a console message.&lt;/p&gt;

&lt;p&gt;Because Xcode doesn’t offer such functionality and because I do not like to complain, I’ve decided to write my own plugin for it.&lt;/p&gt;

&lt;p&gt;I wrote it in Swift.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The beauty of imperfection</title>
      <link>http://merowing.info/2015/11/the-beauty-of-imperfection/</link>
      <pubDate>Tue, 24 Nov 2015 12:29:37 &#43;0100</pubDate>
      
      <guid>http://merowing.info/2015/11/the-beauty-of-imperfection/</guid>
      <description>&lt;video autoplay loop&gt;
  &lt;source src=&#34;http://merowing.info/2015/12/dot-animated.mov&#34; type=&#34;video/mp4&#34;&gt;
&lt;/video&gt;

&lt;p&gt;Perfection is not something one can truly achieve, so it’s very smart that one of the best meditation services called &lt;a href=&#34;https://www.headspace.com&#34;&gt;Headspace&lt;/a&gt; is using an imperfect dot as their brand logo.&lt;/p&gt;

&lt;p&gt;If you ever used their iOS app, you can notice how their dot slightly deforms, captivating your focus.&lt;/p&gt;

&lt;p&gt;When it comes to graphics, if you are able to cheat (if user can’t tell the difference) and make tech stuff easier, just do it.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Swift init()</title>
      <link>http://merowing.info/2015/11/swift-init/</link>
      <pubDate>Tue, 17 Nov 2015 13:51:00 &#43;0100</pubDate>
      
      <guid>http://merowing.info/2015/11/swift-init/</guid>
      <description>&lt;p&gt;With Swift strong typing and immutability, there are rules that prevent you from accesing variables until an object is fully initialized.&lt;/p&gt;

&lt;p&gt;I do not like having a function do more than one thing, so I like to split my initializers into multiple functions, this becomes problematic.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Tips for Interface Builder</title>
      <link>http://merowing.info/2015/11/tips-for-interface-builder/</link>
      <pubDate>Fri, 13 Nov 2015 00:00:00 UTC</pubDate>
      
      <guid>http://merowing.info/2015/11/tips-for-interface-builder/</guid>
      <description>&lt;p&gt;Young developers are happy when they write a lot of code, they like to brag about that project that has tens of thousands lines of code they wrote.&lt;/p&gt;

&lt;p&gt;As we get more experienced, we realize that code is expensive. It&amp;rsquo;s expensive to maintain, debug and reason about.&lt;/p&gt;

&lt;p&gt;That&amp;rsquo;s why we should aim to use tools that can help us avoid writing boilerplate code, one of those tools is Interface Builder.&lt;/p&gt;

&lt;p&gt;Here are a few of my favourite tips &amp;amp; tricks.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Prototyping floating burger menu with CAShapeLayer</title>
      <link>http://merowing.info/2015/11/prototyping-floating-burger-menu-with-cashapelayer/</link>
      <pubDate>Wed, 04 Nov 2015 13:29:44 &#43;0100</pubDate>
      
      <guid>http://merowing.info/2015/11/prototyping-floating-burger-menu-with-cashapelayer/</guid>
      <description>&lt;video autoplay loop&gt;
  &lt;source src=&#34;http://merowing.info/2015/11/Header-small.mp4&#34; type=&#34;video/mp4&#34;&gt;
&lt;/video&gt;

&lt;p&gt;Reproducing above effect is very simple with CAShapeLayer and CoreAnimation&amp;hellip;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Simple way to scrape web with Ruby</title>
      <link>http://merowing.info/2015/01/extracting-data-from-websites-without-api/</link>
      <pubDate>Thu, 15 Jan 2015 00:00:00 UTC</pubDate>
      
      <guid>http://merowing.info/2015/01/extracting-data-from-websites-without-api/</guid>
      <description>&lt;p&gt;MyFitnessPal didn&amp;rsquo;t give me API access, so I wrote some Ruby to get it anyway.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Playgrounds for Objective C</title>
      <link>http://merowing.info/2014/10/playgrounds-for-objective-c/</link>
      <pubDate>Thu, 23 Oct 2014 00:00:00 UTC</pubDate>
      
      <guid>http://merowing.info/2014/10/playgrounds-for-objective-c/</guid>
      <description>&lt;p&gt;Playgrounds are one of the niftiest features of Swift.&lt;/p&gt;

&lt;p&gt;They allow you to quickly test out bits of code and see results in real time without going through the traditional edit-compile-run-debug cycle.&lt;/p&gt;

&lt;p&gt;&amp;ldquo;But surely playgrounds aren&amp;rsquo;t possible in Objective-C?&amp;rdquo; you say&amp;hellip; Think again.&lt;/p&gt;

&lt;p&gt;&lt;div 
class=&#34;magnific-video mpf-iframe embed video-player &#34;&gt;
	&lt;iframe src=&#34;http://player.vimeo.com/video/109757619&#34; type=&#34;text/html&#34;
		allowfullscreen
		frameborder=&#34;0&#34;
		width=&#34;100%&#34;
		height=&#34;385&#34;
	&gt;&lt;/iframe&gt;
&lt;/div&gt;&lt;/p&gt;

&lt;h3 id=&#34;features:628f4197a88d9024a7ea07216490739a&#34;&gt;Features&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Faster than Swift playgrounds (a lot)&lt;/li&gt;
&lt;li&gt;Extra controls for tweaking:&lt;/li&gt;
&lt;li&gt;Adjustable values&lt;/li&gt;
&lt;li&gt;Autoanimated values&lt;/li&gt;
&lt;li&gt;Buttons&lt;/li&gt;
&lt;li&gt;IDE agnostic, once you run it, you can modify the code even from vim.&lt;/li&gt;
&lt;li&gt;Full iOS simulator and access to all iOS features, so you can prototype production ready code.&lt;/li&gt;
&lt;li&gt;Nice DSL for rapid prototyping&lt;/li&gt;
&lt;li&gt;CocoaPods support, so you can add it to existing projects to experiment&lt;/li&gt;
&lt;li&gt;Open source, anyone can contribute to make them better!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/krzysztofzablocki/KZPlayground&#34;&gt;Source code on GitHub&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>

