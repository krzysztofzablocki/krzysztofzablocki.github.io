<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>Krzysztof Zabłocki </title>
      <generator uri="https://gohugo.io">Hugo</generator>
    <link>http://merowing.info/tags/ios/</link>
    <language>en-us</language>
    
    
    <updated>Wed, 18 Oct 2017 12:30:51 &#43;0200</updated>
    
    <item>
      <title>Finding exact difference between 2 instances</title>
      <link>http://merowing.info/2017/10/finding-exact-difference-between-2-instances/</link>
      <pubDate>Wed, 18 Oct 2017 12:30:51 &#43;0200</pubDate>
      
      <guid>http://merowing.info/2017/10/finding-exact-difference-between-2-instances/</guid>
      <description>&lt;p&gt;Better way to identify whats different between two instances.&lt;/p&gt;

&lt;p&gt;Have you ever written tests? Usually they use equality asserts, e.g. XCTAssertEqual, what happens if the object aren&amp;rsquo;t equal ? Xcode throws wall of text at you:&lt;/p&gt;


&lt;figure class=&#34;center&#34;&gt;
    
        &lt;img src=&#34;https://raw.githubusercontent.com/krzysztofzablocki/Difference/master/Resources/before.png&#34;  /&gt;
    
    
&lt;/figure&gt;



&lt;p&gt;This forces you to manually scan the text and try to figure out exactly whats wrong, what if instead you could just learn which property is different?&lt;/p&gt;


&lt;figure class=&#34;center&#34;&gt;
    
        &lt;img src=&#34;https://raw.githubusercontent.com/krzysztofzablocki/Difference/master/Resources/after.png&#34;  /&gt;
    
    
&lt;/figure&gt;



&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>How to find retain cycles and memory leaks sooner</title>
      <link>http://merowing.info/2017/10/how-to-find-retain-cycles-and-memory-leaks-sooner/</link>
      <pubDate>Sun, 01 Oct 2017 12:30:51 &#43;0200</pubDate>
      
      <guid>http://merowing.info/2017/10/how-to-find-retain-cycles-and-memory-leaks-sooner/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/krzysztofzablocki/LifetimeTracker&#34;&gt;
&lt;figure class=&#34;center&#34;&gt;
    
        &lt;img src=&#34;https://raw.githubusercontent.com/krzysztofzablocki/LifetimeTracker/master/Resources/demo.gif&#34;  /&gt;
    
    
&lt;/figure&gt;

&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;LifetimeTracker can surface retain cycle / memory issues right as you develop your application, and it will surface them to you immediately, so you can find them with more ease.&lt;/p&gt;

&lt;p&gt;Instruments and Memory Graph Debugger are great, but too many times developers forget to check for issues as they close the feature implementation.&lt;/p&gt;

&lt;p&gt;If you use those tools sporadicaly many of the issues they surface will require you to investigate the cause, and cost you a lot of time in the process.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Stop weak-strong dance</title>
      <link>http://merowing.info/2017/04/stop-weak-strong-dance/</link>
      <pubDate>Mon, 03 Apr 2017 16:52:42 &#43;0200</pubDate>
      
      <guid>http://merowing.info/2017/04/stop-weak-strong-dance/</guid>
      <description>&lt;p&gt;Closures in Swift are extremely useful, they are interchangeable with functions and that creates a lot of opportunities for useful use-cases. One thing we have to be careful when using them is to avoid &lt;strong&gt;retain cycles&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;We have to do it so often that it begs the question:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Can we improve the call-site API?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Seniority</title>
      <link>http://merowing.info/2017/01/seniority/</link>
      <pubDate>Wed, 18 Jan 2017 15:43:04 &#43;0100</pubDate>
      
      <guid>http://merowing.info/2017/01/seniority/</guid>
      <description>&lt;p&gt;People use different words to classify Engineer skill, some companies give you more senior role just based on a number of years you have been working there, but what does it mean to be Senior?&lt;/p&gt;

&lt;p&gt;In this article, I composed a complete and final list of API&amp;rsquo;s that you need to know to classify yourself as Senior Engineer.&lt;/p&gt;

&lt;p&gt;Here’s a list of all the APIs you must know:&lt;/p&gt;

&lt;p&gt;•&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Testing iOS Apps</title>
      <link>http://merowing.info/2017/01/testing-ios-apps/</link>
      <pubDate>Wed, 11 Jan 2017 09:17:47 &#43;0200</pubDate>
      
      <guid>http://merowing.info/2017/01/testing-ios-apps/</guid>
      <description>&lt;figure class=&#34;center&#34;&gt;
    
        &lt;img src=&#34;http://merowing.info/2017/01/testing.png&#34;  /&gt;
    
    
&lt;/figure&gt;



&lt;p&gt;Writing tests in iOS apps is a touchy subject. Not everyone is so privileged to be able to write tests full-time, for different reasons.&lt;/p&gt;

&lt;p&gt;Some people have full control over their development process and choose not to write tests, maybe because they have had a bad experience with it or they just don&amp;rsquo;t see the value in them.&lt;/p&gt;

&lt;p&gt;I would argue that if you are part of a smaller team, tests can even be more helpful than in big corporations.&lt;/p&gt;

&lt;p&gt;A big corporation might have dedicated QA team, but if you are one of 2 developers, then you are often responsible for ensuring quality and reliability of your work, its considerable pressure because each feature you write might break something else in your app.&lt;/p&gt;

&lt;p&gt;Let us look at practices and tips for writing maintainable tests in your iOS Apps.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>How hard would it be to adjust your iOS app in real-time?</title>
      <link>http://merowing.info/2017/01/how-hard-would-it-be-to-adjust-your-ios-app-in-real-time/</link>
      <pubDate>Mon, 02 Jan 2017 17:21:09 &#43;0200</pubDate>
      
      <guid>http://merowing.info/2017/01/how-hard-would-it-be-to-adjust-your-ios-app-in-real-time/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/krzysztofzablocki/Traits&#34;&gt;
&lt;figure class=&#34;center&#34;&gt;
    
        &lt;img src=&#34;http://merowing.info/2017/01/demo.gif&#34;  /&gt;
    
    
&lt;/figure&gt;

&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Iterating over design that needs to be reflected in code can be tedious and time-consuming.&lt;/p&gt;

&lt;p&gt;Typically the designer works in graphics editing software and then submits flat art to the developer who implements the design in code. Refining the design requires going through the same laborious process.&lt;/p&gt;

&lt;p&gt;Even harder if we want to support multiple themes in our apps. How would we even approach that if we were using Interface Builder?&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s look at how we can approach implementing a simple library that could solve all of the above concerns.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Meta-programming in Swift</title>
      <link>http://merowing.info/2016/12/introducing-sourcery/</link>
      <pubDate>Wed, 14 Dec 2016 11:54:13 &#43;0100</pubDate>
      
      <guid>http://merowing.info/2016/12/introducing-sourcery/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/krzysztofzablocki/Sourcery&#34;&gt;
&lt;figure class=&#34;center&#34;&gt;
    
        &lt;img src=&#34;http://merowing.info/2016/12/daemon.gif&#34;  /&gt;
    
    
&lt;/figure&gt;

&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Swift has very limited runtime support and no meta-programming features.&lt;/p&gt;

&lt;p&gt;I created a new tool that changes that, it&amp;rsquo;s called &lt;a href=&#34;https://github.com/krzysztofzablocki/Sourcery&#34;&gt;Sourcery&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Using it offers many benefits:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Write less repetitive code and make it easy to adhere to &lt;a href=&#34;https://en.wikipedia.org/wiki/Don&#39;t_repeat_yourself&#34;&gt;DRY principle&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;It allows you to create better code, one that would be hard to maintain without it, e.g. &lt;a href=&#34;https://github.com/krzysztofzablocki/Sourcery/blob/master/Sourcery/Templates/Diffable.stencil&#34;&gt;performing automatic property level difference in tests&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Limits the risk of introducing human error when refactoring.&lt;/li&gt;
&lt;li&gt;Sourcery &lt;strong&gt;doesn&amp;rsquo;t use runtime tricks&lt;/strong&gt;, in fact, it allows you to leverage compiler, even more, creating more safety.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Immediate feedback:&lt;/strong&gt; Sourcery features built-in daemon support, enabling you to write your templates in real-time side-by-side with generated code.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Better MVVM setup with POP and Runtime</title>
      <link>http://merowing.info/2016/08/better-mvvm-setup-with-pop-and-runtime/</link>
      <pubDate>Wed, 17 Aug 2016 18:17:19 &#43;0200</pubDate>
      
      <guid>http://merowing.info/2016/08/better-mvvm-setup-with-pop-and-runtime/</guid>
      <description>&lt;figure class=&#34;center&#34;&gt;
    
        &lt;img src=&#34;http://merowing.info/2016/08/better-mvvm.png&#34;  /&gt;
    
    
&lt;/figure&gt;



&lt;p&gt;Even if we are writing pure Swift code in our app, we still deal with Objective-C Frameworks like UIKit.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s take a look at how we can improve our MVVM architecture by leveraging a little bit of Objective-C runtime and Protocol Oriented Programming.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Investing time into developer tools</title>
      <link>http://merowing.info/2016/08/investing-time-into-developer-tools/</link>
      <pubDate>Mon, 08 Aug 2016 12:47:33 &#43;0200</pubDate>
      
      <guid>http://merowing.info/2016/08/investing-time-into-developer-tools/</guid>
      <description>&lt;figure class=&#34;center&#34;&gt;
    
        &lt;img src=&#34;http://merowing.info/2016/08/file-watchers.gif&#34;  /&gt;
    
    
&lt;/figure&gt;



&lt;p&gt;As I open source &lt;a href=&#34;https://github.com/krzysztofzablocki/KZFileWatchers&#34;&gt;another framework&lt;/a&gt; this week, I wanted to share few thoughts about building developer tools.&lt;/p&gt;

&lt;p&gt;Developers are lazy creatures, we like to automate stuff, we write scripts, use File Automation to get rid of repetitive work.&lt;/p&gt;

&lt;p&gt;One would think that we&amp;rsquo;d use the same principles in our jobs, yet I&amp;rsquo;m constantly surprised how few developers actually invest their time into building tools and setting up processes inside their app to ease their day to day work.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Setting up pre-commit hook for iOS</title>
      <link>http://merowing.info/2016/08/setting-up-pre-commit-hook-for-ios/</link>
      <pubDate>Wed, 03 Aug 2016 12:12:55 &#43;0200</pubDate>
      
      <guid>http://merowing.info/2016/08/setting-up-pre-commit-hook-for-ios/</guid>
      <description>&lt;figure class=&#34;center&#34;&gt;
    
        &lt;img src=&#34;http://merowing.info/2016/08/git-up.png&#34;  /&gt;
    
    
&lt;/figure&gt;



&lt;p&gt;Many of us already write unit tests and run continuous integration servers, we can also leverage great tools like &lt;a href=&#34;https://github.com/danger/danger#what-is-danger&#34;&gt;Danger&lt;/a&gt; to easily add some checks to the pull requests.&lt;/p&gt;

&lt;p&gt;If we&amp;rsquo;d like to prevent some common mistakes from appearing in the repo in the first place, we can use &lt;strong&gt;pre-commit&lt;/strong&gt; hook.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Logging in Swift</title>
      <link>http://merowing.info/2016/07/logging-in-swift/</link>
      <pubDate>Wed, 13 Jul 2016 17:36:06 &#43;0200</pubDate>
      
      <guid>http://merowing.info/2016/07/logging-in-swift/</guid>
      <description>&lt;p&gt;Logging is one of the rare cases when you could probably justify having a singleton, but with Swift Protocol Extension you don&amp;rsquo;t need to.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s integrate Logging in a way that:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Doesn&amp;rsquo;t cause 3rd party dependencies to leak across your codebase&lt;/li&gt;
&lt;li&gt;Hides the existence of singleton from the codebase&lt;/li&gt;
&lt;li&gt;Supports writing fully testable code&lt;/li&gt;
&lt;li&gt;Ability to suppress logs from specific modules or classes&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>iOS Architecture</title>
      <link>http://merowing.info/2016/06/ios-architecture/</link>
      <pubDate>Mon, 27 Jun 2016 00:00:00 UTC</pubDate>
      
      <guid>http://merowing.info/2016/06/ios-architecture/</guid>
      <description>&lt;p&gt;I recently did a talk in Prague about iOS Application Architecture, you can &lt;a href=&#34;http://slideslive.com/38897361/good-ios-application-architecture&#34;&gt;watch it here.&lt;/a&gt;
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>8 Books that everyone should read</title>
      <link>http://merowing.info/2016/02/8-books-that-everyone-should-read/</link>
      <pubDate>Wed, 03 Feb 2016 13:13:48 &#43;0100</pubDate>
      
      <guid>http://merowing.info/2016/02/8-books-that-everyone-should-read/</guid>
      <description>&lt;figure class=&#34;center&#34;&gt;
    
        &lt;img src=&#34;http://merowing.info/2016/02/books.png&#34;  /&gt;
    
    
&lt;/figure&gt;



&lt;p&gt;Looking for new books to read?&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Programming</title>
      <link>http://merowing.info/2016/01/programming/</link>
      <pubDate>Thu, 14 Jan 2016 16:21:06 &#43;0100</pubDate>
      
      <guid>http://merowing.info/2016/01/programming/</guid>
      <description>&lt;figure class=&#34;center&#34;&gt;
    
        &lt;img src=&#34;http://merowing.info/2016/01/programming.png&#34;  /&gt;
    
    
&lt;/figure&gt;



&lt;p&gt;What is programming?&lt;/p&gt;

&lt;p&gt;For me it has always been about solving problems, and analytical thinking.&lt;/p&gt;

&lt;p&gt;Does it matter what language or platform you solve problems on? How do you learn more on your selected platform?&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Improve your iOS Architecture with FlowControllers</title>
      <link>http://merowing.info/2016/01/improve-your-ios-architecture-with-flowcontrollers/</link>
      <pubDate>Tue, 05 Jan 2016 11:23:46 &#43;0100</pubDate>
      
      <guid>http://merowing.info/2016/01/improve-your-ios-architecture-with-flowcontrollers/</guid>
      <description>&lt;p&gt;When working on iOS app, now more than ever one should avoid having view controllers pushing other view controllers around.&lt;/p&gt;

&lt;p&gt;Why?&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
