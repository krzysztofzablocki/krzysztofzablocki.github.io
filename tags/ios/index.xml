<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>Krzysztof Zab≈Çocki </title>
      <generator uri="https://gohugo.io">Hugo</generator>
    <link>http://merowing.info/tags/ios/</link>
    <language>en-us</language>
    
    
    <updated>Mon, 02 Jan 2017 17:21:09 &#43;0200</updated>
    
    <item>
      <title>How hard would it be to adjust your iOS app in real-time?</title>
      <link>http://merowing.info/2017/01/how-hard-would-it-be-to-adjust-your-ios-app-in-real-time/</link>
      <pubDate>Mon, 02 Jan 2017 17:21:09 &#43;0200</pubDate>
      
      <guid>http://merowing.info/2017/01/how-hard-would-it-be-to-adjust-your-ios-app-in-real-time/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/krzysztofzablocki/Traits&#34;&gt;
&lt;figure class=&#34;center&#34;&gt;
    
        &lt;img src=&#34;http://merowing.info/2017/01/demo.gif&#34;  /&gt;
    
    
&lt;/figure&gt;

&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Iterating over design that needs to be reflected in code can be tedious and time-consuming.&lt;/p&gt;

&lt;p&gt;Typically the designer works in graphics editing software and then submits flat art to the developer who implements the design in code. Refining the design requires going through the same laborious process.&lt;/p&gt;

&lt;p&gt;Even harder if we want to support multiple themes in our apps. How would we even approach that if we were using Interface Builder?&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s look at how we can approach implementing a simple library that could solve all of the above concerns.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Meta-programming in Swift</title>
      <link>http://merowing.info/2016/12/introducing-sourcery/</link>
      <pubDate>Wed, 14 Dec 2016 11:54:13 &#43;0100</pubDate>
      
      <guid>http://merowing.info/2016/12/introducing-sourcery/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/krzysztofzablocki/Sourcery&#34;&gt;
&lt;figure class=&#34;center&#34;&gt;
    
        &lt;img src=&#34;http://merowing.info/2016/12/daemon.gif&#34;  /&gt;
    
    
&lt;/figure&gt;

&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Swift has very limited runtime support and no meta-programming features.&lt;/p&gt;

&lt;p&gt;I created a new tool that changes that, it&amp;rsquo;s called &lt;a href=&#34;https://github.com/krzysztofzablocki/Sourcery&#34;&gt;Sourcery&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Using it offers many benefits:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Write less repetitive code and make it easy to adhere to &lt;a href=&#34;https://en.wikipedia.org/wiki/Don&#39;t_repeat_yourself&#34;&gt;DRY principle&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;It allows you to create better code, one that would be hard to maintain without it, e.g. &lt;a href=&#34;https://github.com/krzysztofzablocki/Sourcery/blob/master/Sourcery/Templates/Diffable.stencil&#34;&gt;performing automatic property level difference in tests&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Limits the risk of introducing human error when refactoring.&lt;/li&gt;
&lt;li&gt;Sourcery &lt;strong&gt;doesn&amp;rsquo;t use runtime tricks&lt;/strong&gt;, in fact, it allows you to leverage compiler, even more, creating more safety.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Immediate feedback:&lt;/strong&gt; Sourcery features built-in daemon support, enabling you to write your templates in real-time side-by-side with generated code.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Better MVVM setup with POP and Runtime</title>
      <link>http://merowing.info/2016/08/better-mvvm-setup-with-pop-and-runtime/</link>
      <pubDate>Wed, 17 Aug 2016 18:17:19 &#43;0200</pubDate>
      
      <guid>http://merowing.info/2016/08/better-mvvm-setup-with-pop-and-runtime/</guid>
      <description>&lt;p&gt;
&lt;figure class=&#34;center&#34;&gt;
    
        &lt;img src=&#34;http://merowing.info/2016/08/better-mvvm.png&#34;  /&gt;
    
    
&lt;/figure&gt;

&lt;/p&gt;

&lt;p&gt;Even if we are writing pure Swift code in our app, we still deal with Objective-C Frameworks like UIKit.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s take a look at how we can improve our MVVM architecture by leveraging a little bit of Objective-C runtime and Protocol Oriented Programming.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Investing time into developer tools</title>
      <link>http://merowing.info/2016/08/investing-time-into-developer-tools/</link>
      <pubDate>Mon, 08 Aug 2016 12:47:33 &#43;0200</pubDate>
      
      <guid>http://merowing.info/2016/08/investing-time-into-developer-tools/</guid>
      <description>&lt;p&gt;
&lt;figure class=&#34;center&#34;&gt;
    
        &lt;img src=&#34;http://merowing.info/2016/08/file-watchers.gif&#34;  /&gt;
    
    
&lt;/figure&gt;

&lt;/p&gt;

&lt;p&gt;As I open source &lt;a href=&#34;https://github.com/krzysztofzablocki/KZFileWatchers&#34;&gt;another framework&lt;/a&gt; this week, I wanted to share few thoughts about building developer tools.&lt;/p&gt;

&lt;p&gt;Developers are lazy creatures, we like to automate stuff, we write scripts, use File Automation to get rid of repetitive work.&lt;/p&gt;

&lt;p&gt;One would think that we&amp;rsquo;d use the same principles in our jobs, yet I&amp;rsquo;m constantly surprised how few developers actually invest their time into building tools and setting up processes inside their app to ease their day to day work.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Setting up pre-commit hook for iOS</title>
      <link>http://merowing.info/2016/08/setting-up-pre-commit-hook-for-ios/</link>
      <pubDate>Wed, 03 Aug 2016 12:12:55 &#43;0200</pubDate>
      
      <guid>http://merowing.info/2016/08/setting-up-pre-commit-hook-for-ios/</guid>
      <description>&lt;p&gt;
&lt;figure class=&#34;center&#34;&gt;
    
        &lt;img src=&#34;http://merowing.info/2016/08/git-up.png&#34;  /&gt;
    
    
&lt;/figure&gt;

&lt;/p&gt;

&lt;p&gt;Many of us already write unit tests and run continuous integration servers, we can also leverage great tools like &lt;a href=&#34;https://github.com/danger/danger#what-is-danger&#34;&gt;Danger&lt;/a&gt; to easily add some checks to the pull requests.&lt;/p&gt;

&lt;p&gt;If we&amp;rsquo;d like to prevent some common mistakes from appearing in the repo in the first place, we can use &lt;strong&gt;pre-commit&lt;/strong&gt; hook.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Logging in Swift</title>
      <link>http://merowing.info/2016/07/logging-in-swift/</link>
      <pubDate>Wed, 13 Jul 2016 17:36:06 &#43;0200</pubDate>
      
      <guid>http://merowing.info/2016/07/logging-in-swift/</guid>
      <description>&lt;p&gt;Logging is one of the rare cases when you could probably justify having a singleton, but with Swift Protocol Extension you don&amp;rsquo;t need to.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s integrate Logging in a way that:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Doesn&amp;rsquo;t cause 3rd party dependencies to leak across your codebase&lt;/li&gt;
&lt;li&gt;Hides the existence of singleton from the codebase&lt;/li&gt;
&lt;li&gt;Supports writing fully testable code&lt;/li&gt;
&lt;li&gt;Ability to suppress logs from specific modules or classes&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>iOS Architecture</title>
      <link>http://merowing.info/2016/06/ios-architecture/</link>
      <pubDate>Mon, 27 Jun 2016 00:00:00 UTC</pubDate>
      
      <guid>http://merowing.info/2016/06/ios-architecture/</guid>
      <description>&lt;p&gt;I recently did a talk in Prague about iOS Application Architecture, you can &lt;a href=&#34;http://slideslive.com/38897361/good-ios-application-architecture&#34;&gt;watch it here.&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>8 Books that everyone should read</title>
      <link>http://merowing.info/2016/02/8-books-that-everyone-should-read/</link>
      <pubDate>Wed, 03 Feb 2016 13:13:48 &#43;0100</pubDate>
      
      <guid>http://merowing.info/2016/02/8-books-that-everyone-should-read/</guid>
      <description>&lt;p&gt;
&lt;figure class=&#34;center&#34;&gt;
    
        &lt;img src=&#34;http://merowing.info/2016/02/books.png&#34;  /&gt;
    
    
&lt;/figure&gt;

&lt;/p&gt;

&lt;p&gt;Looking for new books to read?&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Programming</title>
      <link>http://merowing.info/2016/01/programming/</link>
      <pubDate>Thu, 14 Jan 2016 16:21:06 &#43;0100</pubDate>
      
      <guid>http://merowing.info/2016/01/programming/</guid>
      <description>&lt;p&gt;
&lt;figure class=&#34;center&#34;&gt;
    
        &lt;img src=&#34;http://merowing.info/2016/01/programming.png&#34;  /&gt;
    
    
&lt;/figure&gt;

&lt;/p&gt;

&lt;p&gt;What is programming?&lt;/p&gt;

&lt;p&gt;For me it has always been about solving problems, and analytical thinking.&lt;/p&gt;

&lt;p&gt;Does it matter what language or platform you solve problems on? How do you learn more on your selected platform?&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Improve your iOS Architecture with FlowControllers</title>
      <link>http://merowing.info/2016/01/improve-your-ios-architecture-with-flowcontrollers/</link>
      <pubDate>Tue, 05 Jan 2016 11:23:46 &#43;0100</pubDate>
      
      <guid>http://merowing.info/2016/01/improve-your-ios-architecture-with-flowcontrollers/</guid>
      <description>&lt;p&gt;When working on iOS app, now more than ever one should avoid having view controllers pushing other view controllers around.&lt;/p&gt;

&lt;p&gt;Why?&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Little things that can make your life easier in 2016</title>
      <link>http://merowing.info/2015/12/little-things-that-can-make-your-life-easier-in-2016/</link>
      <pubDate>Wed, 23 Dec 2015 10:31:43 &#43;0100</pubDate>
      
      <guid>http://merowing.info/2015/12/little-things-that-can-make-your-life-easier-in-2016/</guid>
      <description>&lt;p&gt;As we are closing this year, let&amp;rsquo;s take a look at few simple things you can add to your iOS developer toolbox to make your life easier and be more productive in 2016.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Details matter - harnessing the power of Core Animation</title>
      <link>http://merowing.info/2015/12/details-matter---harnessing-the-power-of-coreanimation/</link>
      <pubDate>Wed, 16 Dec 2015 22:23:13 &#43;0100</pubDate>
      
      <guid>http://merowing.info/2015/12/details-matter---harnessing-the-power-of-coreanimation/</guid>
      <description>&lt;p&gt;A friend showed me animations from &lt;a href=&#34;https://medium.com/bridge-collection/improve-the-payment-experience-with-animations-3d1b0a9b810e#.15j1me98l&#34;&gt;Stripe Checkout&lt;/a&gt; and asked: &amp;ldquo;how could we implement that on iOS?&amp;rdquo;&lt;/p&gt;

&lt;p&gt;Quite simply, Core Animation is very powerful and if one learns how to harness that power, they do not need write a lot of code.&lt;/p&gt;

&lt;video autoplay loop&gt;
  &lt;source src=&#34;http://merowing.info/2015/12/details.mov&#34; type=&#34;video/mp4&#34;&gt;
&lt;/video&gt;
</description>
    </item>
    
    <item>
      <title>Writing Xcode plugin in Swift</title>
      <link>http://merowing.info/2015/12/writing-xcode-plugin-in-swift/</link>
      <pubDate>Tue, 08 Dec 2015 11:07:09 &#43;0100</pubDate>
      
      <guid>http://merowing.info/2015/12/writing-xcode-plugin-in-swift/</guid>
      <description>&lt;p&gt;
&lt;figure class=&#34;center&#34;&gt;
    
        &lt;img src=&#34;http://merowing.info/2015/12/logs.gif&#34;  /&gt;
    
    
&lt;/figure&gt;

&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve found myself using Xcode a lot more than I did in Objective-C.&lt;/p&gt;

&lt;p&gt;One of things I‚Äôve missed a lot from my &lt;a href=&#34;https://www.jetbrains.com/objc/&#34;&gt;AppCode&lt;/a&gt; setup, is the  ability to jump to specific file &amp;amp; line that logged a console message.&lt;/p&gt;

&lt;p&gt;Because Xcode doesn‚Äôt offer such functionality and because I do not like to complain, I‚Äôve decided to write my own plugin for it.&lt;/p&gt;

&lt;p&gt;I wrote it in Swift.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The beauty of imperfection</title>
      <link>http://merowing.info/2015/11/the-beauty-of-imperfection/</link>
      <pubDate>Tue, 24 Nov 2015 12:29:37 &#43;0100</pubDate>
      
      <guid>http://merowing.info/2015/11/the-beauty-of-imperfection/</guid>
      <description>&lt;video autoplay loop&gt;
  &lt;source src=&#34;http://merowing.info/2015/12/dot-animated.mov&#34; type=&#34;video/mp4&#34;&gt;
&lt;/video&gt;

&lt;p&gt;Perfection is not something one can truly achieve, so it‚Äôs very smart that one of the best meditation services called &lt;a href=&#34;https://www.headspace.com&#34;&gt;Headspace&lt;/a&gt; is using an imperfect dot as their brand logo.&lt;/p&gt;

&lt;p&gt;If you ever used their iOS app, you can notice how their dot slightly deforms, captivating your focus.&lt;/p&gt;

&lt;p&gt;When it comes to graphics, if you are able to cheat (if user can‚Äôt tell the difference) and make tech stuff easier, just do it.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Swift init()</title>
      <link>http://merowing.info/2015/11/swift-init/</link>
      <pubDate>Tue, 17 Nov 2015 13:51:00 &#43;0100</pubDate>
      
      <guid>http://merowing.info/2015/11/swift-init/</guid>
      <description>&lt;p&gt;With Swift strong typing and immutability, there are rules that prevent you from accesing variables until an object is fully initialized.&lt;/p&gt;

&lt;p&gt;I do not like having a function do more than one thing, so I like to split my initializers into multiple functions, this becomes problematic.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
