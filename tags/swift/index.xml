<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Swift on Krzysztof Zabłocki</title>
    <link>http://merowing.info/tags/swift/</link>
    <description>Recent content in Swift on Krzysztof Zabłocki</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 11 Jan 2017 09:17:47 +0200</lastBuildDate>
    
	<atom:link href="http://merowing.info/tags/swift/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Testing iOS Apps</title>
      <link>http://merowing.info/2017/01/testing-ios-apps/</link>
      <pubDate>Wed, 11 Jan 2017 09:17:47 +0200</pubDate>
      
      <guid>http://merowing.info/2017/01/testing-ios-apps/</guid>
      <description>&lt;figure class=&#34;center&#34;&gt;
    
        &lt;img src=&#34;http://merowing.info/2017/01/testing.png&#34;  /&gt;
    
    
&lt;/figure&gt;



&lt;p&gt;Writing tests in iOS apps is a touchy subject. Not everyone is so privileged to be able to write tests full-time, for different reasons.&lt;/p&gt;

&lt;p&gt;Some people have full control over their development process and choose not to write tests, maybe because they have had a bad experience with it or they just don&amp;rsquo;t see the value in them.&lt;/p&gt;

&lt;p&gt;I would argue that if you are part of a smaller team, tests can even be more helpful than in big corporations.&lt;/p&gt;

&lt;p&gt;A big corporation might have dedicated QA team, but if you are one of 2 developers, then you are often responsible for ensuring quality and reliability of your work, its considerable pressure because each feature you write might break something else in your app.&lt;/p&gt;

&lt;p&gt;Let us look at practices and tips for writing maintainable tests in your iOS Apps.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Better MVVM setup with POP and Runtime</title>
      <link>http://merowing.info/2016/08/better-mvvm-setup-with-pop-and-runtime/</link>
      <pubDate>Wed, 17 Aug 2016 18:17:19 +0200</pubDate>
      
      <guid>http://merowing.info/2016/08/better-mvvm-setup-with-pop-and-runtime/</guid>
      <description>&lt;figure class=&#34;center&#34;&gt;
    
        &lt;img src=&#34;http://merowing.info/2016/08/better-mvvm.png&#34;  /&gt;
    
    
&lt;/figure&gt;



&lt;p&gt;Even if we are writing pure Swift code in our app, we still deal with Objective-C Frameworks like UIKit.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s take a look at how we can improve our MVVM architecture by leveraging a little bit of Objective-C runtime and Protocol Oriented Programming.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Logging in Swift</title>
      <link>http://merowing.info/2016/07/logging-in-swift/</link>
      <pubDate>Wed, 13 Jul 2016 17:36:06 +0200</pubDate>
      
      <guid>http://merowing.info/2016/07/logging-in-swift/</guid>
      <description>&lt;p&gt;Logging is one of the rare cases when you could probably justify having a singleton, but with Swift Protocol Extension you don&amp;rsquo;t need to.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s integrate Logging in a way that:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Doesn&amp;rsquo;t cause 3rd party dependencies to leak across your codebase&lt;/li&gt;
&lt;li&gt;Hides the existence of singleton from the codebase&lt;/li&gt;
&lt;li&gt;Supports writing fully testable code&lt;/li&gt;
&lt;li&gt;Ability to suppress logs from specific modules or classes&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Swift init()</title>
      <link>http://merowing.info/2015/11/swift-init/</link>
      <pubDate>Tue, 17 Nov 2015 13:51:00 +0100</pubDate>
      
      <guid>http://merowing.info/2015/11/swift-init/</guid>
      <description>&lt;p&gt;With Swift strong typing and immutability, there are rules that prevent you from accesing variables until an object is fully initialized.&lt;/p&gt;

&lt;p&gt;I do not like having a function do more than one thing, so I like to split my initializers into multiple functions, this becomes problematic.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>A Swift introduction into fitness</title>
      <link>http://merowing.info/2014/09/a-swift-introduction-into-fitness/</link>
      <pubDate>Tue, 30 Sep 2014 00:00:00 +0000</pubDate>
      
      <guid>http://merowing.info/2014/09/a-swift-introduction-into-fitness/</guid>
      <description>&lt;p&gt;Many people think getting fit is hard, the fitness industry is full of myths and unnecessary complications.&lt;/p&gt;

&lt;p&gt;Doesn’t matter if your goal is to lose weight or gain it, what matter is Physics and law of energy:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If you burn more calories than you eat you will lose weight&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Two questions arise:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;how to estimate our caloric needs?&lt;/li&gt;
&lt;li&gt;how fast should we lose or gain weight?&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;We&amp;rsquo;ll use Swift Playgrounds to explain it.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Implementing observable in Swift</title>
      <link>http://merowing.info/2014/07/implementing-observable-in-swift/</link>
      <pubDate>Thu, 17 Jul 2014 00:00:00 +0000</pubDate>
      
      <guid>http://merowing.info/2014/07/implementing-observable-in-swift/</guid>
      <description>&lt;p&gt;KVO has been integral part of Cocoa programming, yet it&amp;rsquo;s not available for pure Swift classes.&lt;/p&gt;

&lt;p&gt;Is there a way to implement your own implementation of native KVO?
&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>